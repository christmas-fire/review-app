services:
  db:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    image: migrate/migrate
    container_name: migrate_db
    command: [
        "-path", "/migrations",
        "-database", "postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${DATABASE_NAME}?sslmode=disable",
        "up"
    ]
    volumes:
      - ./backend/migrations:/migrations
    depends_on:
      db:
        condition: service_healthy
    restart: 'no'

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: gin_backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      GIN_MODE: release
      DATABASE_CONN: "postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${DATABASE_NAME}?sslmode=disable"
    depends_on:
      migrate:
        condition: service_completed_successfully

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      REACT_APP_API_URL: http://localhost:8080
      CHOKIDAR_USEPOLLING: "true"
    depends_on:
      - backend

volumes:
  pgdata:
  